% two-way test
clear;clc;
rng(23,'twister');
R = 1;
T = 100;
N = 60;
K = 2000; %# of repetitions

% generate Lambda
L = get_orthonormal(N,R);
% L_norm = L/(sqrtm(L'*L));

% generate F
rho = 0.5;
sig_e = 0.1;
F = NaN(T+100,R);
e = randn(T+100,R);
F(1,:) = sig_e.*e(1,:);
for t=2:(T+100)
    F(t,:) = F(t-1,:).*rho + sig_e .* e(t,:);
end
F = F(101:T+100,:);
F = F/(sqrtm(F'*F));
% F_norm = F/(sqrtm(F'*F));

% signal strength
s = sqrt(N*T)*(R:-1:1)';D=diag(s);

target = NaN(K,1);
for k = 1:K
    if mod(k, 100) == 0
        disp(k);
    end
    % generate tensor Y   https://www.tensortoolbox.org/ktensor_doc.html#7
    sig_u = 1;
    % s = [2*sqrt((N*J*T)^a1);*sqrt((N*J*T)^a2)];
    Y = L*D*F';
    U = sig_u*randn([N,T]);
    Y = Y + U;

    [L_hat,S,F_hat] = svd(Y,"econ");

    L_hat = L_hat(:,1:R);
    s_hat = diag(S);
    s_hat = s_hat(1:R);
    F_hat = F_hat(:,1:R);

    % select correct sign
    for r=1:R
        L_hat(:,r) = L_hat(:,r)*sign(L_hat(:,r)'*L(:,r));
        F_hat(:,r) = F_hat(:,r)*sign(F_hat(:,r)'*F(:,r));
    end

    Y_hat = L_hat*diag(s_hat)*F_hat';
    Y_e = Y - Y_hat;
    
    sig_u_hat = std(Y_e,1,'all');

    target(k) = sig

end